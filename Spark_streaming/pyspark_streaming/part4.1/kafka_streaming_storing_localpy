from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.types import *
import time
#Need to define the topics and bootstrap server to access the streaming data from kafka .
kafka_topic_name = "my-topic-test1"
kafka_bootstrap_servers = 'kafka-bs.fractal-kafka.ovh:9094'

if __name__ == "__main__":
    print("Welcome to DataMaking !!!")
    print("Stream Data Processing Application Started ...")
    print(time.strftime("%Y-%m-%d %H:%M:%S"))
    #Creating a spark session.
    spark = SparkSession \
        .builder \
        .appName("PySpark Structured Streaming with Kafka and Message Format as JSON") \
        .master("local[*]") \
        .getOrCreate()

    spark.sparkContext.setLogLevel("ERROR")

    # Construct a streaming DataFrame that reads from test-topic
    orders_df = spark \
        .readStream \
        .format("kafka") \
        .option("kafka.bootstrap.servers", kafka_bootstrap_servers) \
        .option("subscribe", kafka_topic_name) \
        .option("startingOffsets", "latest") \
        .load()

    print("Printing Schema of orders_df: ")
    orders_df.printSchema()

    orders_df1 = orders_df.selectExpr("CAST(value AS STRING)", "timestamp")
    #orders_df1.show()

    # Write final result into console for debugging purpose and storing in local
    orders_agg_write_stream = orders_df1 \
        .writeStream \
        .trigger(processingTime='5 seconds') \
        .option("truncate", "false")\
        .format("json") \
        .option("path",r"/home/snehasuman/kafka-stream-ovh-fractal/Spark_streaming/pyspark_structured_streaming/part4.1/output") \
        .option("checkpointLocation", r"/home/snehasuman/kafka-stream-ovh-fractal/Spark_streaming/pyspark_structured_streaming/part4.1/output") \
        .start()

    orders_agg_write_stream.awaitTermination()

    print("Stream Data Processing Application Completed.")